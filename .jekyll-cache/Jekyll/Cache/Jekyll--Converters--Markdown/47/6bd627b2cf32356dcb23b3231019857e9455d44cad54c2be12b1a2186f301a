I"z%<p>A very brief exploration of Content-Type</p>

<hr />

<p>I recently used the <a href="http://emailrep.io">EmailRep.io</a> API on for a rapid prototype I was building. In heart of quick prototyping, I bypassed setting a Content-Type on my Fetch call:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span> <span class="dl">'</span><span class="s1">https://emailrep.io/</span><span class="dl">'</span><span class="o">+</span><span class="p">{</span><span class="nx">email</span><span class="p">},</span> <span class="p">{</span>
    <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">Key</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span><span class="nx">API</span> <span class="nx">KEY</span><span class="p">},</span>
    <span class="p">},</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">status</span> <span class="o">!==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
  <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
  <span class="p">});</span>
</code></pre></div></div>

<p>Seems all good - should work fine.</p>

<p>This was the response:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">Response</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">size:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="err">timeout:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="p">[</span><span class="err">Symbol(Body</span><span class="w"> </span><span class="err">internals)</span><span class="p">]</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">body:</span><span class="w"> </span><span class="err">PassThrough</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="err">_readableState:</span><span class="w"> </span><span class="p">[</span><span class="err">ReadableState</span><span class="p">],</span><span class="w">
      </span><span class="err">readable:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="err">_events:</span><span class="w"> </span><span class="p">[</span><span class="err">Object:</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="err">prototype</span><span class="p">],</span><span class="w">
      </span><span class="err">_eventsCount:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
      </span><span class="err">_maxListeners:</span><span class="w"> </span><span class="err">undefined</span><span class="p">,</span><span class="w">
      </span><span class="err">_writableState:</span><span class="w"> </span><span class="p">[</span><span class="err">WritableState</span><span class="p">],</span><span class="w">
      </span><span class="err">writable:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="err">allowHalfOpen:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="err">_transformState:</span><span class="w"> </span><span class="p">[</span><span class="err">Object</span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="err">disturbed:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="err">error:</span><span class="w"> </span><span class="kc">null</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">[</span><span class="err">Symbol(Response</span><span class="w"> </span><span class="err">internals)</span><span class="p">]</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">url:</span><span class="w"> </span><span class="err">'https://emailrep.io/example@test.com'</span><span class="p">,</span><span class="w">
    </span><span class="err">status:</span><span class="w"> </span><span class="mi">200</span><span class="p">,</span><span class="w">
    </span><span class="err">statusText:</span><span class="w"> </span><span class="err">'OK'</span><span class="p">,</span><span class="w">
    </span><span class="err">headers:</span><span class="w"> </span><span class="err">Headers</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">[</span><span class="err">Symbol(map)</span><span class="p">]</span><span class="err">:</span><span class="w"> </span><span class="p">[</span><span class="err">Object:</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="err">prototype</span><span class="p">]</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="err">counter:</span><span class="w"> </span><span class="mi">0</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The call returned with a status code of 200 OK, but the body contained a PassThrough object - an unexpected object type. I was confused - this was not the expected body and content as outlined in the API documentation.  How do I work with a PassThrough object? I couldn’t find anything particularly helpful about this kind of object or what my problem was.</p>

<p>Take a quick look at my API call - do you notice something missing? In my HTTP request headers.</p>

<p>I didn’t set a Content-Type.</p>

<h1 id="what-is-content-type">What is Content-Type?</h1>

<p>In June 1999, The Internet Society released a document - <a href="https://tools.ietf.org/html/rfc2616">RFC2616</a> - outlining the Hypertext Transfer Protocol - HTTP/1.1. This document gives context, definitions, and best practices for working with HTTP.  HTTP/1.1 is no longer the standard - we are now on <a href="https://http2.github.io/">HTTP/2</a>. Many of the definitions and concepts outlined in RFC2616 are still the same as the HTTP/2 document was simply an update of the existing documentation for HTTP/1.1.</p>

<p>Content-Type is explained in RFC2616:</p>

<blockquote>
  <p>The Content-Type entity-header field indicates the media type of the
entity-body sent to the recipient or, in the case of the HEAD method, the media type that would have been sent had the request been a GET.</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Content-Type   = "Content-Type" ":" media-type
</code></pre></div></div>

<p>In addition, Content-Type’s <a href="https://www.notion.so/Don-t-Forget-Your-Content-Types-a5f210a7a5eb484081203ec1219c438a">best practices</a> are also expanded on:</p>

<blockquote>
  <p>Content-Encoding may be used to indicate any additional content codings applied to the data … that are a property of the requested resource. There is no default encoding.</p>
</blockquote>

<p>Any HTTP/1.1 message containing an entity-body SHOULD include a Content-Type header field defining the media type of that body. If and only if the media type is not given by a Content-Type field, the recipient MAY attempt to guess the media type via inspection of its content and/or the name extension(s) of the URI used to identify the resource. If the media type remains unknown, the recipient SHOULD treat it as type “application/octet-stream”.</p>

<h1 id="bonus-content">Bonus Content</h1>

<p>It’s a 10.</p>

<p style="margin-bottom:0;"><br /></p>
<pre style="margin:0; padding-top:2em;">
<center><iframe class="centered" width="560" height="315" src="https://www.youtube-nocookie.com/embed/SLP9mbCuhJc" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen=""></iframe></center><center></center>
</pre>
<p style="margin-bottom:0;"><br /></p>
:ET